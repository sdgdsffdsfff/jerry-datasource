/**
 * 
 */
package com.hehua.datasource.spring;

import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.BeanDefinitionHolder;
import org.springframework.beans.factory.config.ConstructorArgumentValues;
import org.springframework.beans.factory.parsing.BeanComponentDefinition;
import org.springframework.beans.factory.parsing.CompositeComponentDefinition;
import org.springframework.beans.factory.support.AbstractBeanDefinition;
import org.springframework.beans.factory.support.BeanDefinitionReaderUtils;
import org.springframework.beans.factory.xml.BeanDefinitionParser;
import org.springframework.beans.factory.xml.ParserContext;
import org.springframework.beans.factory.xml.XmlReaderContext;
import org.springframework.context.annotation.AnnotationConfigUtils;
import org.w3c.dom.Element;

import com.hehua.datasource.HehuaDataSource;
import com.hehua.datasource.config.DataSourceConfigManager;
import com.hehua.datasource.config.DataSourceMappingConfig.BizNameKey;
import com.hehua.datasource.config.DataSourceManager;

/**
 * 自动data source生成
 * 
 * @author SamChi <sam@afanda.com>
 * @Date 2012-8-16
 */
public class AutoGenerateDataSourceParser implements BeanDefinitionParser {

    private static final Log logger = LogFactory.getLog(AutoGenerateDataSourceParser.class);

    /* (non-Javadoc)
     * @see org.springframework.beans.factory.xml.BeanDefinitionParser#parse(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)
     */
    @Override
    public BeanDefinition parse(Element element, ParserContext parserContext) {
        logger.debug("start to resolve auto generate dataSource.");

        XmlReaderContext readerContext = parserContext.getReaderContext();
        Object source = readerContext.extractSource(element);
        CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(
                element.getTagName(), source);

        DataSourceConfigManager configManager = DataSourceManager.getInstance();
        this.addBean("dataSourceConfigManager", parserContext, new ConstructorArgumentValues(),
                compositeDef);
        for (BizNameKey bizNameKey : configManager.getBizNames()) {
            String id;
            if (bizNameKey.isWrite()) {
                id = bizNameKey.getBizName() + "DataSource";
            } else {
                id = bizNameKey.getBizName() + "ReadDataSource";
            }
            logger.debug("found dataSource:" + id);

            ConstructorArgumentValues constructorArgs = new ConstructorArgumentValues();
            constructorArgs.addIndexedArgumentValue(0, bizNameKey.isWrite());
            constructorArgs.addIndexedArgumentValue(1,
                    configManager.getDataSource(bizNameKey.getBizName(), bizNameKey.isWrite()));
            this.addBean(id, parserContext, constructorArgs, compositeDef);
        }

        // Register annotation config processors, if necessary.
        boolean annotationConfig = true;
        if (annotationConfig) {
            Set<BeanDefinitionHolder> processorDefinitions = AnnotationConfigUtils
                    .registerAnnotationConfigProcessors(readerContext.getRegistry(), source);
            for (BeanDefinitionHolder processorDefinition : processorDefinitions) {
                compositeDef.addNestedComponent(new BeanComponentDefinition(processorDefinition));
            }
        }

        readerContext.fireComponentRegistered(compositeDef);
        return null;
    }

    private void addBean(String id, ParserContext parserContext,
            ConstructorArgumentValues constructorArgumentValues,
            CompositeComponentDefinition compositeDef) {
        AbstractBeanDefinition beanDefinition = new AbstractBeanDefinition() {

            private static final long serialVersionUID = 3550804645452422203L;

            @Override
            public String getParentName() {
                return null;
            }

            @Override
            public void setParentName(String parentName) {
            }

            @Override
            public AbstractBeanDefinition cloneBeanDefinition() {
                throw new UnsupportedOperationException();
            }
        };
        String[] aliases = new String[0];
        BeanDefinitionHolder holder = new BeanDefinitionHolder(beanDefinition, id, aliases);
        BeanDefinitionReaderUtils.registerBeanDefinition(holder, parserContext.getRegistry());
        beanDefinition.setBeanClass(HehuaDataSource.class);
        beanDefinition.setLazyInit(true);

        beanDefinition.setConstructorArgumentValues(constructorArgumentValues);
        compositeDef.addNestedComponent(new BeanComponentDefinition(holder));
    }
}
